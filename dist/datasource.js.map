{"version":3,"sources":["../src/datasource.js"],"names":["_","OMIDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","parser","DOMParser","q","withCredentials","headers","basicAuth","length","query","targets","when","data","target","objectType","columnStructure","defaultData","resp","doRequest","method","xmlDoc","parseFromString","omiJson","xmlToJson","omiEnvelope","response","result","msg","Objects","omiJsonArray","getOMIArrayByType","mapArrayToTableColumns","JSON","parse","then","status","message","title","options","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","xml","obj","nodeType","attributes","j","attribute","item","nodeName","nodeValue","hasChildNodes","i","childNodes","push","old","constructor","Array","array","forEach","concat","el","_attributes","indexOf","Object","omiObjectsArray","rows","itemValues","get","col","path","columns","datasourceRequest","filter","map","scopedVars","refId","hide","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class OMIDatasource {\r\n\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        this.type = instanceSettings.type;\r\n        this.url = instanceSettings.url;\r\n        this.name = instanceSettings.name;\r\n        this.parser = new DOMParser();\r\n        this.q = $q;\r\n        this.backendSrv = backendSrv;\r\n        this.templateSrv = templateSrv;\r\n        this.withCredentials = instanceSettings.withCredentials;\r\n        this.headers = {'Content-Type': 'application/xml'};\r\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\r\n            this.headers['Authorization'] = instanceSettings.basicAuth;\r\n        }\r\n    }\r\n\r\n    async query(query) {\r\n        if (query.targets.length <= 0) {\r\n            return this.q.when({data: []});\r\n        }\r\n\r\n        let target = query.targets[0];\r\n\r\n\r\n        let data = target.target;\r\n\r\n        if (!target.objectType || !target.columnStructure) {\r\n            return target.defaultData;\r\n        }\r\n\r\n\r\n        let resp = await this.doRequest({\r\n            url: this.url,\r\n            data: data,\r\n            method: 'POST'\r\n        });\r\n\r\n        let xmlDoc = this.parser.parseFromString(resp.data, \"text/xml\");\r\n        let omiJson = this.xmlToJson(xmlDoc);\r\n\r\n        omiJson = omiJson.omiEnvelope.response.result.msg.Objects;\r\n\r\n        let omiJsonArray = this.getOMIArrayByType(omiJson, target.objectType);\r\n\r\n        return this.mapArrayToTableColumns(omiJsonArray, JSON.parse(target.columnStructure));\r\n    }\r\n\r\n    testDatasource() {\r\n        return this.doRequest({\r\n            url: this.url + '/',\r\n            method: 'GET',\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\r\n            }\r\n        });\r\n    }\r\n\r\n    annotationQuery(options) {\r\n        return [];\r\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\r\n        var annotationQuery = {\r\n            range: options.range,\r\n            annotation: {\r\n                name: options.annotation.name,\r\n                datasource: options.annotation.datasource,\r\n                enable: options.annotation.enable,\r\n                iconColor: options.annotation.iconColor,\r\n                query: query\r\n            },\r\n            rangeRaw: options.rangeRaw\r\n        };\r\n\r\n        return this.doRequest({\r\n            url: this.url + '/annotations',\r\n            method: 'POST',\r\n            data: annotationQuery\r\n        }).then(result => {\r\n            return result.data;\r\n        });\r\n    }\r\n\r\n    xmlToJson(xml) {\r\n        // Create the return object\r\n        var obj = {};\r\n        if (xml.nodeType == 1) { // element\r\n            // do attributes\r\n            if (xml.attributes.length > 0) {\r\n                obj[\"_attributes\"] = {};\r\n                for (var j = 0; j < xml.attributes.length; j++) {\r\n                    var attribute = xml.attributes.item(j);\r\n                    obj[\"_attributes\"][attribute.nodeName] = attribute.nodeValue;\r\n                }\r\n            }\r\n        } else if (xml.nodeType == 3) { // text\r\n            obj = xml.nodeValue;\r\n        }\r\n        // do children\r\n        if (xml.hasChildNodes()) {\r\n            for (var i = 0; i < xml.childNodes.length; i++) {\r\n                var item = xml.childNodes.item(i);\r\n                var nodeName = item.nodeName;\r\n                if (typeof(obj[nodeName]) == \"undefined\") {\r\n                    obj[nodeName] = this.xmlToJson(item);\r\n                } else {\r\n                    if (typeof(obj[nodeName].push) == \"undefined\") {\r\n                        var old = obj[nodeName];\r\n                        obj[nodeName] = [];\r\n                        obj[nodeName].push(old);\r\n                    }\r\n                    obj[nodeName].push(this.xmlToJson(item));\r\n                }\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    getOMIArrayByType(omiJson, type) {\r\n\r\n        if (!omiJson)\r\n            return [];\r\n        if (omiJson.constructor === Array) {\r\n            let array = [];\r\n            omiJson.forEach(el => array = array.concat(this.getOMIArrayByType(el, type)));\r\n            return array;\r\n        }\r\n        if (omiJson._attributes && omiJson._attributes.type && omiJson._attributes.type.indexOf(type) >= 0) {\r\n            return [omiJson];\r\n        }\r\n        if (!omiJson.Object)\r\n            return [];\r\n\r\n        return this.getOMIArrayByType(omiJson.Object, type)\r\n    }\r\n\r\n    mapArrayToTableColumns(omiObjectsArray, columnStructure) {\r\n\r\n        let rows = [];\r\n\r\n        omiObjectsArray.forEach(item => {\r\n            let itemValues = [];\r\n            columnStructure.forEach(col => {\r\n                itemValues.push(_.get(item, col.path))\r\n            });\r\n            rows.push(itemValues)\r\n        });\r\n\r\n        return {\r\n            data: [\r\n                {\r\n                    type: \"table\",\r\n                    columns: columnStructure,\r\n                    rows: rows\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    doRequest(options) {\r\n        options.withCredentials = this.withCredentials;\r\n        options.headers = this.headers;\r\n\r\n        return this.backendSrv.datasourceRequest(options);\r\n    }\r\n\r\n    buildQueryParameters(options) {\r\n        //remove placeholder targets\r\n        options.targets = _.filter(options.targets, target => {\r\n            return target.target !== 'select metric';\r\n        });\r\n\r\n        var targets = _.map(options.targets, target => {\r\n            return {\r\n                target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\r\n                refId: target.refId,\r\n                hide: target.hide,\r\n                type: target.type || 'timeserie'\r\n            };\r\n        });\r\n\r\n        options.targets = targets;\r\n\r\n        return options;\r\n    }\r\n\r\n    getTagKeys(options) {\r\n        return new Promise((resolve, reject) => {\r\n            this.doRequest({\r\n                url: this.url + '/tag-keys',\r\n                method: 'POST',\r\n                data: options\r\n            }).then(result => {\r\n                return resolve(result.data);\r\n            });\r\n        });\r\n    }\r\n\r\n    getTagValues(options) {\r\n        return new Promise((resolve, reject) => {\r\n            this.doRequest({\r\n                url: this.url + '/tag-values',\r\n                method: 'POST',\r\n                data: options\r\n            }).then(result => {\r\n                return resolve(result.data);\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n"]}